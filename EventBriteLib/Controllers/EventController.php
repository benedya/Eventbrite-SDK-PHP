<?php
/*
 * EventBriteLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/01/2015
 */

class EventController {
    /**
     * This endpoint allows you to retrieve Events from across Eventbrite�s directory, regardless of which user owns the event � and of course, this endpoint will only return Events that are �public�.
     * @param   string|null $q    Optional parameter: TODO: type description here
     * @param   DateTime|null $dateModifiedRangeStart    Optional parameter: TODO: type description here
     * @param   DateTime|null $dateCreatedKeyword    Optional parameter: TODO: type description here
     * @param   DateTime|null $dateCreatedRangeEnd    Optional parameter: TODO: type description here
     * @param   DateTime|null $dateCreatedRangeStart    Optional parameter: TODO: type description here
     * @param   string|null $startDateKeyword    Optional parameter: TODO: type description here
     * @param   DateTime|null $startDateRangeEnd    Optional parameter: TODO: type description here
     * @param   DateTime|null $startDateRangeStart    Optional parameter: TODO: type description here
     * @param   string|null $formats    Optional parameter: TODO: type description here
     * @param   string|null $categories    Optional parameter: TODO: type description here
     * @param   string|null $trackingCode    Optional parameter: TODO: type description here
     * @param   DateTime|null $dateModifiedRangeEnd    Optional parameter: TODO: type description here
     * @param   string|null $userId    Optional parameter: TODO: type description here
     * @param   string|null $venueCountry    Optional parameter: TODO: type description here
     * @param   string|null $venueRegion    Optional parameter: TODO: type description here
     * @param   string|null $venueCity    Optional parameter: TODO: type description here
     * @param   string|null $locationWithin    Optional parameter: TODO: type description here
     * @param   string|null $locationLongitude    Optional parameter: TODO: type description here
     * @param   string|null $locationLatitude    Optional parameter: TODO: type description here
     * @param   string|null $locationAddress    Optional parameter: TODO: type description here
     * @param   bool|null $popular    Optional parameter: TODO: type description here
     * @param   string|null $sortBy    Optional parameter: TODO: type description here
     * @param   string|null $sinceId    Optional parameter: TODO: type description here
     * @param   string|null $organizerId    Optional parameter: TODO: type description here
     * @param   string|null $dateModifiedKeyword    Optional parameter: TODO: type description here
     * @return GeteventSearchResponse response from the API call*/
    public function getEventSearch (
                $q = NULL,
                $dateModifiedRangeStart = NULL,
                $dateCreatedKeyword = NULL,
                $dateCreatedRangeEnd = NULL,
                $dateCreatedRangeStart = NULL,
                $startDateKeyword = NULL,
                $startDateRangeEnd = NULL,
                $startDateRangeStart = NULL,
                $formats = NULL,
                $categories = NULL,
                $trackingCode = NULL,
                $dateModifiedRangeEnd = NULL,
                $userId = NULL,
                $venueCountry = NULL,
                $venueRegion = NULL,
                $venueCity = NULL,
                $locationWithin = NULL,
                $locationLongitude = NULL,
                $locationLatitude = NULL,
                $locationAddress = NULL,
                $popular = NULL,
                $sortBy = NULL,
                $sinceId = NULL,
                $organizerId = NULL,
                $dateModifiedKeyword = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3//events/search/';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'q' => $q,
            'date_modified.range_start' => $dateModifiedRangeStart,
            'date_created.keyword' => $dateCreatedKeyword,
            'date_created.range_end' => $dateCreatedRangeEnd,
            'date_created.range_start' => $dateCreatedRangeStart,
            'start_date.keyword' => $startDateKeyword,
            'start_date.range_end' => $startDateRangeEnd,
            'start_date.range_start' => $startDateRangeStart,
            'formats' => $formats,
            'categories' => $categories,
            'tracking_code' => $trackingCode,
            'date_modified.range_end' => $dateModifiedRangeEnd,
            'user.id' => $userId,
            'venue.country' => $venueCountry,
            'venue.region' => $venueRegion,
            'venue.city' => $venueCity,
            'location.within' => $locationWithin,
            'location.longitude' => $locationLongitude,
            'location.latitude' => $locationLatitude,
            'location.address' => $locationAddress,
            'popular' => $popular,
            'sort_by' => $sortBy,
            'since_id' => $sinceId,
            'organizer.id' => $organizerId,
            'date_modified.keyword' => $dateModifiedKeyword,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Ticket Classes are the types of attendance that are associated with an event (examples might be �VIP�, �General Admission�, or �Early Bird�). This endpoint allows you to ticket classes on a specific event.
     * @param   TicketClassBody $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function createTicketType (
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3//events/{Event ID}/ticket_classes/';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Content-type' => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   string $ticketClassID    Required parameter: TODO: type description here
     * @return Ticket response from the API call*/
    public function retrieveTicketTypeDetails (
                $eventID,
                $ticketClassID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/ticket_classes/{Ticket Class ID}/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            'Ticket Class ID' => $ticketClassID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   string $ticketClassID    Required parameter: TODO: type description here
     * @param   TicketClassBody $body    Required parameter: TODO: type description here
     * @return Ticket response from the API call*/
    public function updateTicket (
                $eventID,
                $ticketClassID,
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/ticket_classes/{Ticket Class ID}/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            'Ticket Class ID' => $ticketClassID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare parameters
        $parameters = array (
            'body' => json_encode($body)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * This endpoint allows you to retrieve Event category options from across Eventbrites directory.
     * @return RetreiveEventCategoryResponse response from the API call*/
    public function getRetreiveEventCategory () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/categories';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Events are what Eventbrite is all about! Many of Eventbrite�s API use cases resolve around pulling details of a specific event within an Eventbrite account.
     * @param   Events $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function createAnEvent (
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Content-type' => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return EventSearchResponse response from the API call*/
    public function retrieveEventDetail (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   Events $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function updateEventDetail (
                $eventID,
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function createPublishAnEvent (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/publish/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function createUnPublishAnEvent (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/unpublish/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $status    Required parameter: TODO: type description here
     * @param   string $changedSince    Required parameter: TODO: type description here
     * @param   string $expand    Required parameter: TODO: type description here
     * @return AttendeeResponse response from the API call*/
    public function retrieveEventAttendees (
                $status,
                $changedSince,
                $expand) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/attendees/';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'status' => $status,
            'changed_since' => $changedSince,
            'expand' => $expand,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   string $attendeeID    Required parameter: TODO: type description here
     * @param   string $expand    Required parameter: TODO: type description here
     * @return AttendeeResponse response from the API call*/
    public function retrieveEventAttendeesDetail (
                $eventID,
                $attendeeID,
                $expand) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/attendees/{Attendee ID}/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            'Attendee ID' => $attendeeID,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'expand' => $expand,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   string $status    Required parameter: TODO: type description here
     * @param   string $changedSince    Required parameter: TODO: type description here
     * @return RetrieveEventOrderResponse response from the API call*/
    public function retrieveEventOrder (
                $eventID,
                $status,
                $changedSince) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/orders/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'status' => $status,
            'changed_since' => $changedSince,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return GetEventDiscountsResponse response from the API call*/
    public function getEventDiscounts (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/discounts/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   Discount $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function createDiscountCode (
                $eventID,
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/discounts/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   Discount $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function updateDiscountCode (
                $eventID,
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/discounts/';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'Event ID' => $eventID,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return GetEventAccessCodesResponse response from the API call*/
    public function getEventAccessCodes (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/access_codes/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   AccessCode $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function createEventAccessCodes (
                $eventID,
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/access_codes/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   AccessCode $body    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function updateEventAccessCodes (
                $eventID,
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/access_codes/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body));

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return Transfer response from the API call*/
    public function retrieveEventTransfer (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/transfers/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return RetrieveEventTeamsResponse response from the API call*/
    public function retrieveEventTeams (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/teams/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @return RetrieveEventTeamsResponse response from the API call*/
    public function retrieveEventTeamDetails (
                $eventID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/teams/{Team ID}/';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'Event ID' => $eventID,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param   string $eventID    Required parameter: TODO: type description here
     * @param   string $teamID    Required parameter: TODO: type description here
     * @return void response from the API call*/
    public function retrieveEventTeamAttendees (
                $eventID,
                $teamID) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/events/{Event ID}/teams/{Team ID}/attendees/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'Event ID' => $eventID,
            'Team ID' => $teamID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
}