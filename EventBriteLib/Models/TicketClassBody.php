<?php
/*
 * EventBriteLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/01/2015
 */

class TicketClassBody {
    /**
     * TODO: Write general description for this method
     * @param string $ticket_class.name public property
     */
    protected $ticket_class.name;

    /**
     * TODO: Write general description for this method
     * @param string $ticket_class.description/td> public property
     */
    protected $ticket_class.description/td>;

    /**
     * TODO: Write general description for this method
     * @param int $ticket_class.qantity_total public property
     */
    protected $ticket_class.qantity_total;

    /**
     * TODO: Write general description for this method
     * @param CurrencyModel $ticket_class.cost.currency public property
     */
    protected $ticket_class.cost.currency;

    /**
     * TODO: Write general description for this method
     * @param string $ticket_class.cost.value public property
     */
    protected $ticket_class.cost.value;

    /**
     * TODO: Write general description for this method
     * @param bool $ticket_class.donation public property
     */
    protected $ticket_class.donation;

    /**
     * TODO: Write general description for this method
     * @param bool $ticket_class.free public property
     */
    protected $ticket_class.free;

    /**
     * TODO: Write general description for this method
     * @param bool $ticket_class.include_fee public property
     */
    protected $ticket_class.include_fee;

    /**
     * TODO: Write general description for this method
     * @param bool $ticket_class.split_fee public property
     */
    protected $ticket_class.split_fee;

    /**
     * TODO: Write general description for this method
     * @param bool $ticket_class.hide_description public property
     */
    protected $ticket_class.hide_description;

    /**
     * TODO: Write general description for this method
     * @param DateTimeZone $ticket_class.sales_start public property
     */
    protected $ticket_class.sales_start;

    /**
     * TODO: Write general description for this method
     * @param DateTimeZone $ticket_class.sales_start_after public property
     */
    protected $ticket_class.sales_start_after;

    /**
     * TODO: Write general description for this method
     * @param int $ticket_class.minimum_quantity public property
     */
    protected $ticket_class.minimum_quantity;

    /**
     * TODO: Write general description for this method
     * @param int $ticket_class.maximum_quantity public property
     */
    protected $ticket_class.maximum_quantity;

    /**
     * TODO: Write general description for this method
     * @param bool $ticket_class.auto_hide public property
     */
    protected $ticket_class.auto_hide;

    /**
     * TODO: Write general description for this method
     * @param DateTimeZone $ticket_class.auto_hide_before public property
     */
    protected $ticket_class.auto_hide_before;

    /**
     * TODO: Write general description for this method
     * @param DateTimeZone $ticket_class.auth_hide_after public property
     */
    protected $ticket_class.auth_hide_after;

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }
} 