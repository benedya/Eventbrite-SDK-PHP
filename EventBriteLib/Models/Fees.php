<?php
/*
 * EventBriteLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/01/2015
 */

class Fees {
    /**
     * TODO: Write general description for this method
     * @param string $cost_increase public property
     */
    protected $cost_increase;

    /**
     * TODO: Write general description for this method
     * @param string $gross public property
     */
    protected $gross;

    /**
     * TODO: Write general description for this method
     * @param string $payment_fee public property
     */
    protected $payment_fee;

    /**
     * TODO: Write general description for this method
     * @param string $eventbrite_fee public property
     */
    protected $eventbrite_fee;

    /**
     * TODO: Write general description for this method
     * @param string $transfer_fee public property
     */
    protected $transfer_fee;

    /**
     * TODO: Write general description for this method
     * @param string $tax public property
     */
    protected $tax;

    /**
     * TODO: Write general description for this method
     * @param string $currency public property
     */
    protected $currency;

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }
} 