<?php namespace Eventbrite\Calls;

use Eventbrite\Configurations\Configuration;
use Eventbrite\Exceptions\APIException;
use Eventbrite\Helpers\APIHelper;
use Unirest\Request;

/*
 * EventBriteLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/01/2015
 */

class UserContact
{
    /**
     * TODO: type endpoint description here
     * @param  string $userID Required parameter: TODO: type description here
     * @return void   response from the API call*/
    public function getLists(
        $userID
    ) {
        //the base uri for api requests
        $queryBuilder = Configuration::baseUri();

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/users/{User ID}/contact_lists/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array(
            'User ID' => $userID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array(
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::token())
        );

        //prepare API request
        $response = Request::get($queryUrl, $headers);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response code: ".$response->code.". ".$response->body->error_description, $response->code);
        }
    }

    /**
     * TODO: type endpoint description here
     * @param  string      $userID Required parameter: TODO: type description here
     * @param  string|null $name   Optional parameter: TODO: type description here
     * @return void        response from the API call*/
    public function createList(
        $userID,
        $name = null
    ) {
        //the base uri for api requests
        $queryBuilder = Configuration::baseUri();

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/users/{User ID}/contact_lists/';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array(
            'User ID' => $userID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array(
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::token())
        );

        //prepare API request
        $response = Request::post($queryUrl, $headers, $name);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response code: ".$response->code.". ".$response->body->error_description, $response->code);
        }
    }

    /**
     * TODO: type endpoint description here
     * @param  string              $userID        Required parameter: TODO: type description here
     * @param  string              $contactListID Required parameter: TODO: type description here
     * @return ContactListResponse response from the API call*/
    public function getListDetails(
        $userID,
        $contactListID
    ) {
        //the base uri for api requests
        $queryBuilder = Configuration::baseUri();

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/users/{User ID}/contact_lists/{Contact List ID}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array(
            'User ID' => $userID,
            'Contact List ID' => $contactListID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array(
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::token())
        );

        //prepare API request
        $response = Request::get($queryUrl, $headers);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response code: ".$response->code.". ".$response->body->error_description, $response->code);
        }

        return $response->body;
    }

    /**
     * TODO: type endpoint description here
     * @param  string $userID         Required parameter: TODO: type description here
     * @param  string $mContactListID Required parameter: TODO: type description here
     * @param  string $name           Required parameter: TODO: type description here
     * @return void   response from the API call*/
    public function updateListName(
        $userID,
        $mContactListID,
        $name
    ) {
        //the base uri for api requests
        $queryBuilder = Configuration::baseUri();

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/users/{User ID}/contact_lists/{Contact List ID}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array(
            'User ID' => $userID,
            '{Contact List ID' => $mContactListID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array(
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::token())
        );

        //prepare API request
        $response = Request::post($queryUrl, $headers, $name);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response code: ".$response->code.". ".$response->body->error_description, $response->code);
        }
    }

    /**
     * TODO: type endpoint description here
     * @param  string                   $userID        Required parameter: TODO: type description here
     * @param  string                   $contactListID Required parameter: TODO: type description here
     * @return ContacListDetailResponse response from the API call*/
    public function getAssociatedContact(
        $userID,
        $contactListID
    ) {
        //the base uri for api requests
        $queryBuilder = Configuration::baseUri();

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/users/{User ID}/contact_lists/{Contact List ID}/contacts';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array(
            'User ID' => $userID,
            'Contact List ID' => $contactListID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array(
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::token())
        );

        //prepare API request
        $response = Request::get($queryUrl, $headers);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response code: ".$response->code.". ".$response->body->error_description, $response->code);
        }

        return $response->body;
    }

    /**
     * TODO: type endpoint description here
     * @param  string  $userID        Required parameter: TODO: type description here
     * @param  string  $contactListID Required parameter: TODO: type description here
     * @param  Contact $body          Required parameter: TODO: type description here
     * @return void    response from the API call*/
    public function addContact(
        $userID,
        $contactListID,
        $body
    ) {
        //the base uri for api requests
        $queryBuilder = Configuration::baseUri();

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/users/{User ID}/contact_lists/{Contact List ID}/contacts';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array(
            'User ID' => $userID,
            'Contact List ID' => $contactListID,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array(
            'User-Agent' => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::token())
        );

        //prepare API request
        $response = Request::post($queryUrl, $headers, json_encode($body));

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response code: ".$response->code.". ".$response->body->error_description, $response->code);
        }
    }
}
